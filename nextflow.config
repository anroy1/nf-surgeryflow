process {
    publishDir = { "${params.outdir}/$meta.id/${task.process.replaceAll(':', '-')}" }
}

// Global default params, used in configs
params {
    input = false
    outdir = 'results'
    lean_output = false
    publish_dir_mode = 'copy'

    //** Tracking method **//
    run_local_tracking = true
    run_pft = false

    //** T1 Preprocessing options **//
    preproc_t1_run_denoising                   = true
    preproc_t1_run_N4                          = true
    preproc_t1_run_resampling                  = true
    preproc_t1_run_synthbet                    = true
    preproc_t1_run_crop                        = true

    // DWI Preprocessing options **//
    preproc_dwi_run_denoising                  = true   
    preproc_dwi_run_degibbs                    = true
    preproc_dwi_run_N4                         = true   
    preproc_dwi_run_resampling                 = true

    //** Eddy Topup options **//
    topup_eddy_run_eddy                        = true
    topup_eddy_run_topup                       = true

    //** Mean FRF **//
    run_mean_frf                               = false

    //** Registration options **//
    run_synthmorph                             = true

    //** Segmentation options **//
    run_synthseg                               = true

    //** Atlas directory **//
    atlas_directory                           = null

    //** DICOM to NIfTI options **//
    run_nii_to_dicom                           = false
}

process {

    /* CONFIGURATION */

    withName: "PREPROC_DWI:DENOISE_DWI" {
        containerOptions = ''
        ext.extent = 7
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/DWI/" : "${params.outdir}/${meta.id}/DWI/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.lean_output ? false : true
        ]
    }

    withName: "PREPROC_DWI:EXTRACTB0_RESAMPLE" {
        ext.b0_threshold = 10
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/DWI/" : "${params.outdir}/${meta.id}/DWI/" },
            mode: params.publish_dir_mode,
            saveAs: {
                filename ->
                def ses = meta.session ? "${meta.session}_" : ""
                if ( filename.contains("_b0.nii.gz") ) { "${meta.id}_${ses}desc-preproc_b0.nii.gz" }
                else if ( filename.contains("_b0_mask.nii.gz") ) { "${meta.id}_${ses}desc-brain_mask.nii.gz" }
                else if ( filename.contains("final.bval") ) { params.skip_dwi_preprocessing ? "${meta.id}_${ses}desc-preproc_dwi.bval" : null }
                else if ( filename.contains("final.bvec") ) { params.skip_dwi_preprocessing ? "${meta.id}_${ses}desc-preproc_dwi.bvec" : null }
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "PREPROC_DWI:TOPUP_EDDY:PREPROC_TOPUP" {
        ext.prefix_topup            = "topup_results"
        ext.default_config_topup    = "b02b0.cnf"
        ext.encoding                = "y"  //FIXME
        ext.readout                 = 0.062 //FIXME
        ext.b0_thr_extract_b0       = 10
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/DWI/" : "${params.outdir}/${meta.id}/DWI/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.lean_output ? false : true
        ]
    }

    withName: "PREPROC_DWI:TOPUP_EDDY:PREPROC_EDDY" {
        ext.prefix_topup                            = "topup_results"
        ext.slice_drop_flag                         = true
        ext.bet_topup_before_eddy_f                 = 0.16
        ext.eddy_cmd                                = "eddy_cpu"
        ext.dilate_b0_mask_prelim_brain_extraction  = 5
        ext.bet_prelim_f                            = 0.16
        ext.b0_thr_extract_b0                       = 10
        ext.encoding                                = "y"  //FIXME
        ext.readout                                 = 0.062 //FIXME
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/DWI/" : "${params.outdir}/${meta.id}/DWI/" },
            mode: params.publish_dir_mode,
            saveAs: {
                filename ->
                def ses = meta.session ? "${meta.session}_" : ""
                if ( filename.contains("bvec") ) { "${meta.id}_${ses}desc-preproc_dwi.bvec" }
                else if ( filename.contains("bval") ) {"${meta.id}_${ses}desc-preproc_dwi.bval"}
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "PREPROC_DWI:TOPUP_EDDY:UTILS_EXTRACTB0" {
        ext.b0_extraction_strategy = "mean"
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/DWI/" : "${params.outdir}/${meta.id}/DWI/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.lean_output ? false : true
        ]
    }


    withName: "PREPROC_DWI:BETCROP_FSLBETCROP" {
        ext.bet_f   = 0.16
        ext.b0_thr  = 10
        ext.crop    = true
        ext.dilate  = false
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/DWI/" : "${params.outdir}/${meta.id}/DWI/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.lean_output ? false : true
        ]
    }

    withName: "PREPROC_DWI:N4_DWI" {
        ext.bspline_knot_per_voxel = 0.25
        ext.shrink_factor          = 4
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/DWI/" : "${params.outdir}/${meta.id}/DWI/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.lean_output ? false : true
        ]
    }

    withName: 'PREPROC_DWI:NORMALIZE_DWI' {
        ext.fa_mask_threshold = 0.4
        ext.dwi_shell_tolerance = 20
        ext.dti_shells = null
        ext.max_dti_shell_value = 1200
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/DWI/" : "${params.outdir}/${meta.id}/DWI/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.lean_output ? false : true
        ]
    }

    withName: "PREPROC_DWI:RESAMPLE_DWI" {
        ext.voxel_size      = 1
        ext.interp          = "lin"
        ext.first_suffix    = "dwi"
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/DWI/" : "${params.outdir}/${meta.id}/DWI/" },
            mode: params.publish_dir_mode,
            saveAs: {
                filename ->
                def ses = meta.session ? "${meta.session}_" : ""
                if ( filename.contains("_resampled.nii.gz") ) { "${meta.id}_${ses}desc-preproc_dwi.nii.gz" }
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "PREPROC_DWI:IMAGE_CROPVOLUME" {
        ext.output_bbox     = false
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/DWI/" : "${params.outdir}/${meta.id}/DWI/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.lean_output ? false : true
        ]
    }

    withName: 'REPROC_DWI:PREPROC_GIBBS_DWI' {
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/DWI/" : "${params.outdir}/${meta.id}/DWI/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.lean_output ? false : true
        ]
    }

    withName: "PREPROC_DWI:RESAMPLE_MASK" {
        ext.voxel_size      = 1
        ext.interp          = "nn"
        ext.first_suffix    = "mask"
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/DWI/" : "${params.outdir}/${meta.id}/DWI/" },
            mode: params.publish_dir_mode,
            saveAs: {
                filename ->
                def ses = meta.session ? "${meta.session}_" : ""
                if ( filename.contains("_resampled.nii.gz") ) { "${meta.id}_${ses}desc-brain_mask.nii.gz" }
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "PREPROC_T1:DENOISING_NLMEANS" {
        ext.ncoils     = 1
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/ANAT/" : "${params.outdir}/${meta.id}/ANAT/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.lean_output ? false : true
        ]
    }

    withName: "PREPROC_T1:DENOISING_N4" {
        ext.bspline_knot_per_voxel     = 1
        ext.shrink_factor              = 1
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/anat/" : "${params.outdir}/${meta.id}/anat/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.lean_output ? false : true
        ]
    }

    withName: "PREPROC_T1:IMAGE_CROPVOLUME_T1" {
        ext.output_bbox     = true
        ext.first_suffix    = "t1"
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/ANAT/" : "${params.outdir}/${meta.id}/ANAT/" },
            mode: params.publish_dir_mode,
            saveAs: {
                filename ->
                def ses = meta.session ? "${meta.session}_" : ""
                if ( filename.contains("_cropped.nii.gz") ) { "${meta.id}_${ses}desc-preproc_t1.nii.gz" }
                else if ( filename.contains(".pkl") ) { "${meta.id}_${ses}desc-boundingbox.pkl" }
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "PREPROC_T1:IMAGE_CROPVOLUME_MASK" {
        ext.output_bbox     = false
        ext.first_suffix    = "t1_mask"
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/ANAT/" : "${params.outdir}/${meta.id}/ANAT/" },
            mode: params.publish_dir_mode,
            saveAs: {
                filename ->
                def ses = meta.session ? "${meta.session}_" : ""
                if ( filename.contains("_cropped.nii.gz") ) { "${meta.id}_${ses}desc-brain_mask.nii.gz" }
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "PREPROC_T1:BETCROP_SYNTHBET" {
        ext.nocsf = true
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/ANAT/" : "${params.outdir}/${meta.id}/ANAT/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.lean_output ? false : true
        ]
    }

    withName: "PREPROC_T1:IMAGE_RESAMPLE" {
        ext.voxel_size      = 1
        ext.interp          = "lin"
        ext.first_suffix    = "t1"
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/ANAT/" : "${params.outdir}/${meta.id}/ANAT/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.lean_output ? false : true
        ]
    }

    withName: "T1_REGISTRATION:REGISTRATION_SYNTHREGISTRATION" {
        cpus                 = 20
        memory               = 24.GB
        time                 = 1.h
        ext.lambda           = 0.5
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/ANAT/" : "${params.outdir}/${meta.id}/ANAT/" },
            mode: params.publish_dir_mode,
            saveAs: {
                filename ->
                def ses = meta.session ? "${meta.session}_" : ""
                if ( filename.contains("_warped_image.nii.gz") ) { "${meta.id}_${ses}space-DWI_desc-preproc_T1w.nii.gz" }
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: ":REGISTRATION_CONVERT" {
        ext.in_format_affine = "lta"
        ext.out_format_affine = "itk"
        ext.in_format_deform = "ras"
        ext.out_format_deform = "itk"
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/ANAT/" : "${params.outdir}/${meta.id}/ANAT/" },
            mode: params.publish_dir_mode,
            saveAs: {
                filename ->
                def ses = meta.session ? "${meta.session}_" : ""
                if ( filename.contains("deform_warp") ) { "${meta.id}_${ses}" + ${filename} }
                else if ( filename.contains("affine_warp") ) { "${meta.id}_${ses}" + ${filename} }
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]

    }

    //withName: "T1_REGISTRATION:REGISTER_ANATTODWI" {
        // Nothing to do !
    //}

    //withName: "ANATOMICAL_SEGMENTATION:SEGMENTATION_FASTSEG" {
        // Nothing to do !
    //}

    //withName: "ANATOMICAL_SEGMENTATION:SEGMENTATION_FREESURFERSEG" {
        // Nothing to do !
    //}

    withName: "ANATOMICAL_SEGMENTATION:SEGMENTATION_SYNTHSEG" {
        ext.fast = true
        publishDir = [
                path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/SEGMENTATION/" : "${params.outdir}/${meta.id}/SEGMENTATIONS/" },
                mode: params.publish_dir_mode,
                saveAs: {
                    filename ->
                    def ses = meta.session ? "_${meta.session}" : ""
                    if ( filename.contains("wm_mask") ) { "${meta.id}_${ses}space-DWI_label-WM_mask.nii.gz" }
                    else if ( filename.contains("gm_mask") ) { "${meta.id}_${ses}space-DWI_label-GM_mask.nii.gz" }
                    else if ( filename.contains("csf_mask") ) { "${meta.id}_${ses}space-DWI_label-CSF_mask.nii.gz" }
                    else if ( filename.contains("wm_map") ) { "${meta.id}_${ses}space-DWI_label-WM_probseg.nii.gz" }
                    else if ( filename.contains("gm_map") ) { "${meta.id}_${ses}space-DWI_label-GM_probseg.nii.gz" }
                    else if ( filename.contains("csf_mask") ) { "${meta.id}_${ses}space-DWI_label-CSF_probseg.nii.gz" }
                    else if ( filename.contains("seg") ) { "${meta.id}_${ses}space-DWI_label-probseg.nii.gz" }
                    else if ( filename.contains("aparc_aseg") ) { "${meta.id}_${ses}space-DWI_label-aparc_aseg.nii.gz" }
                    else if ( filename.contains("resample") ) { "${meta.id}_${ses}resampled_image.nii.gz" }
                    else if ( filename.contains("volume") ) { "${meta.id}_${ses}volume.csv" }
                    else if ( filename.contains("qc_score") ) { "${meta.id}_${ses}qc_score.csv" }
                    else if ( filename.contains("versions.yml") ) { null }
                    else { params.lean_output ? null : filename }
                }
            ]
        
    }

    /* MODULES CONFIGURATION */

    //TODO: Probably to delete. Feed fa from DTIMETRICS instead

    // withName: "REGISTRATION_FA" {
    //     ext.fa          = true
    //     ext.ad          = false
    //     ext.evecs       = false
    //     ext.evals       = false
    //     ext.ga          = false
    //     ext.rgb         = false
    //     ext.md          = false
    //     ext.mode        = false
    //     ext.norm        = false
    //     ext.rd          = false
    //     ext.tensor      = false
    //     ext.nonphysical = false
    //     ext.pulsation   = false
    //     ext.residual    = false
    // }

    // withName: "TRANSFORM_WMPARC" {
    //     ext.dimensionality  = 3
    //     ext.image_type      = 0
    //     ext.interpolation   = "NearestNeighbor"
    //     ext.output_dtype    = "uchar"
    //     ext.default_val     = 0
    // }

    // withName: "TRANSFORM_APARC_ASEG" {
    //     ext.dimensionality  = 3
    //     ext.image_type      = 0
    //     ext.interpolation   = "MultiLabel"
    //     ext.output_dtype    = "short"
    //     ext.default_val     = 0
    // }

    withName: "RECONST_FRF" {
        ext.fa          = 0.7
        ext.fa_min      = 0.5
        ext.nvox_min    = 300
        ext.roi_radius  = 20
        ext.set_frf     = null ? true : false
        ext.manual_frf  = null
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/DWI/" : "${params.outdir}/${meta.id}/DWI/" },
            mode: params.publish_dir_mode,
            saveAs: {
                filename ->
                def ses = meta.session ? "${meta.session}_" : ""
                if ( filename.contains("__frf.txt") ) { "${meta.id}_${ses}frf.txt" }
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    //withName: "RECONST_MEANFRF" {
        // Nothing to do !
    //}

    withName: "RECONST_DTIMETRICS" {
        ext.ad          = true
        ext.evecs       = true
        ext.evals       = true
        ext.fa          = true
        ext.ga          = true
        ext.rgb         = true
        ext.md          = true
        ext.mode        = true
        ext.norm        = true
        ext.rd          = true
        ext.tensor      = true
        ext.nonphysical = true
        ext.pulsation   = true
        ext.residual    = true
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/DWI/DTI_METRICS" : "${params.outdir}/${meta.id}/DWI/DTI_METRICS" },
            mode: params.publish_dir_mode,
            saveAs: {
                filename ->
                def ses = meta.session ? "${meta.session}_" : ""
                if ( filename.contains("ad.nii.gz") ) { "${meta.id}_${ses}desc-ad.nii.gz" }
                else if ( filename.contains("fa.nii.gz") ) { "${meta.id}_${ses}desc-fa.nii.gz" }
                else if ( filename.contains("rd.nii.gz") ) { "${meta.id}_${ses}desc-rd.nii.gz" }
                else if ( filename.contains("md.nii.gz") ) { "${meta.id}_${ses}desc-md.nii.gz" }
                else if ( filename.contains("mode.nii.gz") ) { "${meta.id}_${ses}desc-mode.nii.gz" }
                else if ( filename.contains("tensor.nii.gz") ) { "${meta.id}_${ses}desc-tensor.nii.gz" }
                else if ( filename.contains("rgb.nii.gz") ) { "${meta.id}_${ses}desc-rgb.nii.gz" }
                else if ( filename.contains("ga.nii.gz") ) { "${meta.id}_${ses}desc-ga.nii.gz" }
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "RECONST_FODF" {
        ext.b0_thr_extract_b0       = 10
        ext.dwi_shell_tolerance     = 20
        ext.min_fodf_shell_value    = 700
        ext.fodf_shells             = null
        ext.sh_order                = 8
        ext.sh_basis                = "descoteaux07"
        ext.fa_threshold            = 0.1
        ext.md_threshold            = 0.003
        ext.relative_threshold      = 0.1
        ext.fodf_metrics_a_factor   = 2.0
        ext.absolute_peaks          = true  //FIXME
        ext.processes               = 4     //FIXME
        ext.peaks                   = true
        ext.peak_indices            = true
        ext.afd_max                 = true
        ext.afd_total               = true
        ext.afd_sum                 = true
        ext.nufo                    = true
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/DWI/FODF_METRICS" : "${params.outdir}/${meta.id}/DWI/FODF_METRICS" },
            mode: params.publish_dir_mode,
            saveAs: {
                filename ->
                def ses = meta.session ? "${meta.session}_" : ""
                if ( filename.contains("__fodf.nii.gz") ) { "${meta.id}_${ses}desc-fodf.nii.gz" }
                else if ( filename.contains("wm_fodf.nii.gz") ) { "${meta.id}_${ses}desc-wm_fodf.nii.gz" }
                else if ( filename.contains("gm_fodf.nii.gz") ) { "${meta.id}_${ses}desc-gm_fodf.nii.gz" }
                else if ( filename.contains("csf_fodf.nii.gz") ) { "${meta.id}_${ses}desc-csf_fodf.nii.gz" }
                else if ( filename.contains("peaks.nii.gz") ) { "${meta.id}_${ses}desc-peaks.nii.gz" }
                else if ( filename.contains("afd_total.nii.gz") ) { "${meta.id}_${ses}desc-afd_total.nii.gz" }
                else if ( filename.contains("nufo.nii.gz") ) { "${meta.id}_${ses}desc-nufo.nii.gz" }
                else if ( filename.contains("afd_max.nii.gz") ) { "${meta.id}_${ses}desc-afd_max.nii.gz" }
                else if ( filename.contains("afd_sum.nii.gz") ) { "${meta.id}_${ses}desc-afd_sum.nii.gz" }
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "TRACKING_PFTTRACKING" {
        ext.pft_seeding_mask_type           = "wm"
        ext.pft_fa_seeding_mask_threshold   = 0.1
        ext.pft_seeding                     = "npv"
        ext.pft_nbr_seeds                   = 10
        ext.pft_algo                        = "prob"
        ext.pft_step                        = 0.5
        ext.pft_theta                       = 20
        ext.pft_sfthres                     = 0.1
        ext.pft_sfthres_init                = 0.5
        ext.pft_min_len                     = 20
        ext.pft_max_len                     = 200
        ext.pft_particles                   = 15
        ext.pft_back                        = 2
        ext.pft_front                       = 1
        ext.pft_random_seed                 = 0
        ext.pft_compress_streamlines        = true
        ext.pft_compress_value              = 0.2
        ext.basis                           = "descoteaux07"
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/TRACKING/" : "${params.outdir}/${meta.id}/TRACKING/" },
            mode: params.publish_dir_mode,
            saveAs: {
                filename ->
                def ses = meta.session ? "${meta.session}_" : ""
                if ( filename.contains("pft_tracking.trk") ) { "${meta.id}_${ses}desc-pft_tracking.trk" }
                else if ( filename.contains("map_include") ) { "${meta.id}_${ses}space-DWI_label-include_desc-pft_probseg.nii.gz" }
                else if ( filename.contains("map_exclude") ) { "${meta.id}_${ses}space-DWI_label-exclude_desc-pft_probseg.nii.gz" }
                else if ( filename.contains("pft_seeding_mask") ) { "${meta.id}_${ses}space-DWI_label-seeding_desc-pft_mask.nii.gz" }
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "TRACKING_LOCALTRACKING" {
        ext.local_tracking_mask_type            = "fa"
        ext.local_fa_tracking_mask_threshold    = 0.1
        ext.local_seeding_mask_type             = "fa"
        ext.local_fa_seeding_mask_threshold     = 0.1
        ext.local_seeding                       = "npv"
        ext.local_nbr_seeds                     = 5
        ext.local_algo                          = "prob"
        ext.local_step                          = 0.5
        ext.local_theta                         = 20
        ext.local_sfthres                       = 0.1
        ext.local_min_len                       = 20
        ext.local_max_len                       = 200
        ext.local_random_seed                   = 0
        ext.local_compress_streamlines          = true
        ext.local_compress_value                = 0.2
        ext.basis                               = "descoteaux07"
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/DWI/" : "${params.outdir}/${meta.id}/DWI/" },
            mode: params.publish_dir_mode,
            saveAs: {
                filename ->
                def ses = meta.session ? "${meta.session}_" : ""
                if ( filename.contains("local_tracking.trk") ) { "${meta.id}_${ses}desc-local_tracking.trk" }
                else if ( filename.contains("seeding_mask") ) { "${meta.id}_${ses}space-DWI_label-seeding_desc-local_mask.nii.gz" }
                else if ( filename.contains("tracking_mask") ) { "${meta.id}_${ses}space-DWI_label-tracking_desc-local_mask.nii.gz"}
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "BUNDLE_SEG:REGISTRATION_ANTS"{
        ext.quick                               = true
        ext.random_seed                         = 50
        ext.repro_mode                          = 1
        ext.transform                           = "r"
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/DWI/BUNDLES" : "${params.outdir}/${meta.id}/DWI/BUNDLES/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.lean_output ? false : true
        ]
    }

    withName: "BUNDLE_SEG:BUNDLE_RECOGNIZE"{
        ext.minimal_vote_ratio                  = 0.1
        ext.seed                                = 0
        ext.rbx_processes                       = 4
        ext.outlier_alpha                       = 0.5
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/DWI/BUNDLES" : "${params.outdir}/${meta.id}/DWI/BUNDLES" },
            mode: params.publish_dir_mode,
            saveAs: {
                filename ->
                def ses = meta.session ? "${meta.session}_" : ""
                if ( filename.endsWith(".trk") ) { "${meta.id}_${ses}_${filename}" }
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    //withName: "NII_TO_DICOM:"{
    //    Nothing to do !
    //}
}

profiles {
    debug {
        dumpHashes              = true
        process.beforeScript    = 'echo $HOSTNAME'
        cleanup                 = false
        nextflow.enable.configProcessNamesValidation = true
    }
    conda {
        conda.enabled           = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        conda.channels          = ['conda-forge', 'bioconda']
        apptainer.enabled       = false
    }
    mamba {
        conda.enabled           = true
        conda.useMamba          = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    docker {
        docker.enabled          = true
        conda.enabled           = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
        docker.runOptions       = '-u $(id -u):$(id -g)'
        docker.runOptions      = "--user root"
    }
    arm {
        docker.runOptions       = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled     = true
        singularity.autoMounts  = true
        conda.enabled           = false
        docker.enabled          = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    podman {
        podman.enabled          = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    shifter {
        shifter.enabled         = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    charliecloud {
        charliecloud.enabled    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        apptainer.enabled       = false
    }
    apptainer {
        apptainer.enabled       = true
        apptainer.autoMounts    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
    }
    wave {
        apptainer.ociAutoPull   = true
        singularity.ociAutoPull = true
        wave.enabled            = true
        wave.freeze             = true
        wave.strategy           = 'conda,container'
    }
    gitpod {
        executor.name           = 'local'
        executor.cpus           = 4
        executor.memory         = 8.GB
        process {
            resourceLimits = [
                memory: 8.GB,
                cpus  : 4,
                time  : 1.h
            ]
        }
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
    no_symlink {
        params.publish_dir_mode = 'copy'
    }
    slurm {
        process {
            maxRetries          = 1
            cache               = "lenient"
            afterScript         = "sleep 60"
        }

        executor {
            name                = 'slurm'
            queueSize           = 1000
            queueGlobalStatus   = false
            queueStatInterval   = '3 min'
            submitRateLimit     = '10/1sec'
            exitReadTimeout     = '30 min'
            pollInterval        = '30 sec'
            jobName             = {
                task.name
                    .replace("[", "(")
                    .replace("]", ")")
                    .replace(" ", "_")
            }
        }
    }
}

manifest {
    name            = 'anroy261/nf-surgeryflow'
    contributors    = [
        [
            name: 'Antoine Royer',
            affiliation: 'Université de Sherbrooke',
            email: 'roya2118@usherbrooke.ca',
            github: '@anroy261',
            contribution: ['author', 'maintainer'],
            orcid: 'https://orcid.org/' // List of contribution types ('author', 'maintainer' or 'contributor')
        ],
    ]

    homePage        = 'https://github.com/anroy261/nf-surgeryflow'
    description     = """NF-SurgeryFlow is a Nextflow pipeline for processing neuroimaging data"""
    mainScript      = 'main.nf'
    defaultBranch   = 'main'
    nextflowVersion = '!>=24.10.0'
    version         = ''
    doi             = ''
}