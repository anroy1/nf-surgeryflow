/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {
     withName: "PREPROC_DWI:DENOISE_DWI" {
        containerOptions = ''
        ext.extent = params.dwi_denoise_patch_size
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/DWI/" : "${params.outdir}/${meta.id}/DWI/DENOISE" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.lean_output ? false : true
        ]
    }

    withName: "PREPROC_DWI:EXTRACTB0_RESAMPLE" {
        ext.b0_threshold = params.dwi_extract_b0_threshold
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/DWI/" : "${params.outdir}/${meta.id}/DWI/RESAMPLE" },
            mode: params.publish_dir_mode,
            saveAs: {
                filename ->
                def ses = meta.session ? "${meta.session}_" : ""
                if ( filename.contains("_b0.nii.gz") ) { "${meta.id}_${ses}desc-preproc_b0.nii.gz" }
                else if ( filename.contains("_b0_mask.nii.gz") ) { "${meta.id}_${ses}desc-brain_mask.nii.gz" }
                else if ( filename.contains("final.bval") ) { params.skip_dwi_preprocessing ? "${meta.id}_${ses}desc-preproc_dwi.bval" : null }
                else if ( filename.contains("final.bvec") ) { params.skip_dwi_preprocessing ? "${meta.id}_${ses}desc-preproc_dwi.bvec" : null }
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "PREPROC_DWI:TOPUP_EDDY:PREPROC_TOPUP" { //FIXME
        ext.prefix_topup            = params.dwi_susceptibility_output_prefix
        ext.default_config_topup    = params.dwi_susceptibility_config_file
        ext.encoding                = params.dwi_susceptibility_encoding_dir
        ext.readout                 = params.dwi_susceptibility_readout //FIXME
        ext.b0_thr_extract_b0       = params.dwi_susceptibility_b0_threshold
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/DWI/" : "${params.outdir}/${meta.id}/DWI/TOPUP" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.lean_output ? false : true
        ]
    }

    withName: "PREPROC_DWI:TOPUP_EDDY:PREPROC_EDDY" {
        ext.prefix_topup                            = "topup_results"
        ext.slice_drop_flag                         = params.dwi_motion_and_eddy_restore_slices
        ext.bet_topup_before_eddy_f                 = params.dwi_motion_and_eddy_bet_f_threshold
        ext.eddy_cmd                                = params.dwi_motion_and_eddy_command
        ext.dilate_b0_mask_prelim_brain_extraction  = params.dwi_motion_and_eddy_b0_mask_bet
        ext.bet_prelim_f                            = params.dwi_motion_and_eddy_bet_f_threshold
        ext.b0_thr_extract_b0                       = params.dwi_susceptibility_b0_threshold
        ext.encoding                                = params.dwi_susceptibility_encoding_dir
        ext.readout                                 = params.dwi_susceptibility_readout
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/DWI/" : "${params.outdir}/${meta.id}/DWI/EDDY" },
            mode: params.publish_dir_mode,
            saveAs: {
                filename ->
                def ses = meta.session ? "${meta.session}_" : ""
                if ( filename.contains("bvec") ) { "${meta.id}_${ses}desc-preproc_dwi.bvec" }
                else if ( filename.contains("bval") ) {"${meta.id}_${ses}desc-preproc_dwi.bval"}
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "PREPROC_DWI:TOPUP_EDDY:UTILS_EXTRACTB0" {
        ext.b0_extraction_strategy = params.dwi_motion_and_eddy_b0_extract_strategy
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/DWI/" : "${params.outdir}/${meta.id}/DWI/EXTRACTB0" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.lean_output ? false : true
        ]
    }


    withName: "PREPROC_DWI:BETCROP_FSLBETCROP" {
        ext.bet_f   = params.dwi_bet_f_threshold
        ext.b0_thr  = params.dwi_bet_b0_threshold
        ext.crop    = params.dwi_bet_crop
        ext.dilate  = params.dwi_bet_dilate
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/DWI/" : "${params.outdir}/${meta.id}/DWI/BETCROP" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.lean_output ? false : true
        ]
    }

    withName: "PREPROC_DWI:N4_DWI" {
        ext.bspline_knot_per_voxel = params.dwi_bias_bspline_knot_per_voxel
        ext.shrink_factor          = params.dwi_bias_shrink_factor
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/DWI/" : "${params.outdir}/${meta.id}/DWI/N4" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.lean_output ? false : true
        ]
    }

    withName: 'PREPROC_DWI:NORMALIZE_DWI' {
        ext.fa_mask_threshold = params.dwi_normalize_fa_mask_threshold
        ext.dwi_shell_tolerance = params.dwi_normalize_shell_tolerance
        ext.dti_shells = params.dti_shells
        ext.max_dti_shell_value = params.dti_max_shell_value
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/DWI/" : "${params.outdir}/${meta.id}/DWI/NORMALIZE" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.lean_output ? false : true
        ]
    }

    withName: "PREPROC_DWI:RESAMPLE_DWI" {
        ext.voxel_size      = params.dwi_resample_voxel_size
        ext.interp          = params.dwi_resample_interp
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/DWI/" : "${params.outdir}/${meta.id}/DWI/RESAMPLE" },
            mode: params.publish_dir_mode,
            saveAs: {
                filename ->
                def ses = meta.session ? "${meta.session}_" : ""
                if ( filename.contains("_resampled.nii.gz") ) { "${meta.id}_${ses}desc-preproc_dwi.nii.gz" }
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: "PREPROC_DWI:IMAGE_CROPVOLUME" {
        ext.output_bbox     = params.dwi_crop_output_bbox
        ext.first_suffix    = params.dwi_crop_first_suffix
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/DWI/" : "${params.outdir}/${meta.id}/DWI/BETCROP" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.lean_output ? false : true
        ]
    }

    withName: 'PREPROC_DWI:PREPROC_GIBBS_DWI' {
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/DWI/" : "${params.outdir}/${meta.id}/DWI/GIBBS" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.lean_output ? false : true
        ]
    }

    withName: "PREPROC_DWI:RESAMPLE_MASK" {
        ext.voxel_size      = params.dwi_resample_mask_voxel_size
        ext.interp          = params.dwi_resample_mask_interp
        ext.first_suffix    = params.dwi_resample_first_suffix
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/DWI/" : "${params.outdir}/${meta.id}/DWI/RESAMPLE" },
            mode: params.publish_dir_mode,
            saveAs: {
                filename ->
                def ses = meta.session ? "${meta.session}_" : ""
                if ( filename.contains("_resampled.nii.gz") ) { "${meta.id}_${ses}desc-brain_mask.nii.gz" }
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }
}